import random

class Individual():
    def __init__(self, geneSize):
        # geneSize: length of chromosome. In this problem, gene size is 500.
        # gene: List of locus. allele of locus is 1 or 0.
        # totalWeight: Sum of item weight. It can't jump over capacity of Knapsack.
        # totalProfit: Sum of item profit. It is fitness value of individual.
        # If totalWeight > capacity, totalProfit = 0.
        self.geneSize = geneSize
        self.gene = []
        self.totalWeight = 0
        self.totalProfit = 0

    def initialization(self, gene=[]):
        # If input gene is not exist, gene is randomly generated by bit 0, 1
        if not gene :
            for i in range(self.geneSize):
                self.gene.append(random.randint(0,1))
        else:
            self.gene = gene

    def evaluation(self, knapsack):
        # Evaluate individual.
        # Sum all weight and profit of items individual have.
        # If totalWeight is bigger than capacity, totalProfit is 0.
        dataset = knapsack.dataset
        capacity = knapsack.capacity
        for i, value in enumerate(self.gene):
            if (value == 1):
                self.totalWeight += dataset[i]['weight']
                if self.totalWeight > capacity:
                    self.totalProfit = 0
                    break
                else:
                    self.totalProfit += dataset[i]['profit']